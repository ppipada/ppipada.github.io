[{"categories":[{"title":"Life","url":"/categories/life/"}],"content":"Evolution In this ever-changing world, with shifting demands and responsibilities, I have experimented through multiple task management strategies. E.g: Zettelkasten (much more than task management, but still), Eisenhower matrix, Getting things done (GTD) method, Agile/Kanban, ABCDE method, Franklin planner method, etc.\nFinally, I\u0026rsquo;ve settled on a system that works for me (in most cases). It\u0026rsquo;s most likely a mash-up of various methods recommended from books, blog posts, conversations with experienced folks, etc. It may not be perfect and might even change in the future with changing roles and responsibilities, but it has served me well since quite some time.\nGranularity I mostly deal with unit items of tasks which are neither too small, nor too large.\n\u0026ldquo;Steps\u0026rdquo; to complete one item are not included (Not Too Small).\nProjects or ideas that might span a long time (months to years) are excluded (Not Too Large). These items and associated brainstorming don\u0026rsquo;t come into the task list. Parts of it only come here once these things materialize and are broken down into smaller units. Deliberation on a project, visions, designs, breakdowns into smaller items, are outside of task list.\nArrangement (prioritization) P-0: A very short list of things I would do \u0026ldquo;immediately\u0026rdquo;. Items that someone has told you to do immediately, but which you practically won\u0026rsquo;t be able to accomplish, should not be included (i.e. give me yesterday things). Stress Indicator: A large P-0 list means very high level of stress and is a sign of a problem that you need to address. P-1: Slightly larger list that contains the items that I need to address \u0026ldquo;sooner than later\u0026rdquo;. Many tasks enter directly into P-1. During peaceful times, P-0 is mostly populated from P-1. Although direct entries into P-0 can still happen, I prefer to avoid this as much as possible P-2: A large list of various obligations and tasks. These may be things I think I have to do, but they have no associated urgency and questionable motivation. This is an often neglected list. It turns out to be a \u0026ldquo;write and forget\u0026rdquo; list, with a hope attached that it \u0026ldquo;may\u0026rdquo; be used someday. General preference is to move things from here to associated project/ideas pages and reevaluate at that level rather than in task list. P-X: A short list of things that excite me. Keeping it short is crucial. If this grows, that means you I am not really excited by all of them and most probably few items need to be in P2. Daily focus (the heart of my system) Every day come up with tasks in two categories (~5/10 minutes daily time spend):\nDo: These are the tasks I have planned for the day, primarily a subset from P-0. Meetings are excluded from this for now. They tend to be obligatory and preplanned most of the time. I don\u0026rsquo;t see a lot of value in adding them as tasks. Look forward to: Items that excite me. Generally items come from P-0 or P-X here. If there are days when this list is empty, it\u0026rsquo;s a sign of a problem that I need to address. Good days are when there are more than 1 item here. Tools Tried and discarded: Google keep: It served well enough in very early stages. Somehow the \u0026ldquo;features\u0026rdquo; added increased and its usefulness decreased. I still use it for lists or things I need to refer to once in a while, but not for tasks. Roam research/Notion: Tried them for a very short time and most probably very early in their lifecycle. Never got over the initial barrier. Editor plugins Was interested in this as my writing in Markdown increased over time. Multi device availability and less suitability for projects/ideas deliberation were a problem. Kanban boards Tried it out just for the heck of it at some point. Looking at a board at the start of the day was a very bad feeling generally. Current: Microsoft OneNote Got introduced to it via a colleague when I shifted to Mac from Linux. I can easily keep most things in one \u0026ldquo;Page\u0026rdquo;. Daily \u0026ldquo;Do/Look forward to\u0026rdquo; list can be created in minimal time. Moving around tasks is very easy. Project/ideas/Meeting notes pages can be kept in same place. Sync is available across my devices (Mac/Android). There are a lot of features there that I have almost never used. Hope is that the primary workflow and UX for note-taking remains more or less same. Parting note Interestingly, this model doesn\u0026rsquo;t apply to my family life at all. But, I find myself following it about 80% of the time in my work/career life. It\u0026rsquo;s a delicate balance between the immediate necessities and the sparks of excitement that keep me going.\nThe red flags, the problems, the overwhelming moments — all find their reflection in this system. It is not necessary that this model reduces stress per se. Depending on the way my career was going the P-0 list was very overwhelming at some points. And even though I was aware of the red flags, I couldn\u0026rsquo;t do much about it.\nI hope sharing this provides a window into my thoughts and methods, but it\u0026rsquo;s essential to remember that this is purely my experience. What works for me might not be applicable to anyone else, as it\u0026rsquo;s a product of my unique journey and professional life.\n","date":"July 30, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/2023-07-30-taskmgmt/","smallImg":"","tags":[],"timestamp":1690720200,"title":"Finding My Balance: An Evolved and Simplified Task Management System"},{"categories":[{"title":"Life","url":"/categories/life/"}],"content":"Blunt/Direct communicators A lot of engineers (especially individual contributors) get characterized as blunt or direct or assertive communicators. These individuals generally communicate their thoughts and opinions in an unfiltered and straightforward manner. The desired outcome from a conversation these folks expect is clarity. Sugar-coating, diplomatic phrasings, adding vagueness, etc. are generally seen as detrimental to the conversation. Getting straight to the point generally seems important to them, rather than dance around a topic.\nA lot of people on the receiving end of these communications start perceiving this as rudeness. Even though the intention to hurt or belittle others may not be present, a perception of sabotage or hurt ego is very common. The necessary directness added to the conversation generally also is looked up as a superiority complex or ego centric-ness.\nOnline communication and its challenges In the increasingly remote work environment world, video calls (zoom, teams or otherwise), instant messaging (slack, etc.) and emails e omnipresent and their adoption is increasing. Even though these modes of communication facilitate a lot of necessary buffers between individuals (very necessary for introverts, another quality that is very much present in the same sample space of individuals), it presents some unique challenges like:\nTone Misinterpretation: Emails and text-based communication platforms lack the intonation, pauses, and emphasis that vocal speech allows. This absence leads to misinterpretations, with straightforward comments often perceived as harsh or impolite. In my personal experience, this is the largest source of \u0026ldquo;escalations\u0026rdquo;. Perceived Lack of Empathy: Direct communication can be efficient, but it might also be viewed as lacking empathy or consideration for others feelings. Loss of Non-Verbal Cues: In face-to-face communication, a direct individual often relies on physical cues like body language or tone, to soften the impact of their words or gauge the listener\u0026rsquo;s reaction. These cues are generally absent in online communication. These leads to, often missing or misunderstood interpretation by the receiver about the intention behind the message. Delayed Feedback: The delayed responses in a lot of these communication modes, leads to misunderstandings or create uncertainty about how a message has been received. Overemphasis on Content Over Relationship: Blunt speakers often prioritize the message\u0026rsquo;s content over the relationship with the receiver. This can further aggravate feelings of disconnect or misalignment. Formality and Expectations: A blunt person\u0026rsquo;s tendency to be concise and to-the-point comes off as rudeness in an environment where a certain level of formality or \u0026lsquo;small talk\u0026rsquo; or \u0026lsquo;diplomacy\u0026rsquo; is expected. Suggested solutions The below solutions/strategies have been suggested to me multiple times and through multiple forums (performance reviews, 1:1 feedbacks, escalation RCAs, leadership trainings, GPT, etc)\nEmbrace Emotional Intelligence: Be aware of the emotional impact of one\u0026rsquo;s words and use this understanding to frame the communication in a more palatable way. My experience: This is hard, like really hard. It definitely works, but doing it itself is a large challenge. Leverage Emojis/GIFs: Emojis/GIFs can be used to inject humor, soften a statement, or show empathy, which can prevent misinterpretations. My experience: This helps a bit in instant messaging. It is detrimental in almost all other settings. Seek Feedback and Clarify: Checking in or seeking feedback with the receiver can clear up potential misunderstandings and help demonstrate the intention to communicate respectfully. My experience: Feasibility to do this itself is often very less. It mostly works with someone you have an already established rapport with. Utilize Video Calls: Video calls can be a substitute for fave-to-face communication. My experience: Not useful other than 1:1 conversations. Develop Your Written Communication Skills: The written word lacks the subtlety of spoken language. Thus, learning to use phrases that convey respect, empathy, and openness can help to soften the impact of a direct communication style. My experience: Definitely necessary to know how to communicate your point \u0026ldquo;clearly\u0026rdquo;. But asking to stop being direct in written communication is a circular solution i.e stop being direct. Things that worked Apart from the above experiences, the below things have worked for me in varied settings. (Still a long way to go\u0026hellip;):\nDetailed write-ups Writing down proposals/discussion points in detail with proper context setting, options considered, conclusions, sending these docs in advance and then discussing these as needed helps a lot. However, the challenge is that few people want to read lengthy write-ups. Of course this is not applicable to all scenarios, but if done a bit tactically, gives great results. Audio calls with discussion being done on a written medium While discussing a topic, if there are written points, which are projected on the screen, it helps a lot in streamlining the discussion and getting the point across in a much more palatable way. If it is an open discussion, just projecting a blank doc/editor and a facilitator writing down points, actions, pros/cons etc. helps a lot in everyone staying on track and getting to a conclusion. Digital whiteboards/drawing tools have always given worse results with lots of frustrations for me. Avoid any direct personal remarks While not everyone who is direct does it, but it is very easy to call out a person for a mistake or lack of knowledge. This is never ever a good idea. Maybe some 1:1 setting, but mostly should be avoided. Avoid satire Again, may not be a general thing, but never works in an online communication setting. Parting thoughts Seeking efficiency, transparency and honesty can be valuable in many contexts, especially in situations that require decisiveness, clarity, and swift action. Though it has its own challenges, just remembering that there is a human on other end of it can help a long way. More often than not, both the parties want to achieve the same goal.\n","date":"July 10, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/2023-07-10-assertive/","smallImg":"","tags":[],"timestamp":1688992200,"title":"Blunt/Direct/Assertive Communicators, Online Communication Challenges and How to Overcome Them"},{"categories":[{"title":"Life","url":"/categories/life/"}],"content":"Today, I delved into Paul Graham\u0026rsquo;s (PG) How to do great work essay. He provides great insights into the topic and extensively discusses it (and I mean extensively\u0026hellip;). However, there seems to be an aspect that is not addressed in the conversation – the people who are in survival mode or have recently emerged from it and how this affects their ability to do great work.\nWhen someone is in survival mode, they are primarily focused on meeting basic needs such as food, shelter, and healthcare. This can make it challenging to pursue personal interests, hobbies, or ambitious career goals because so much energy and resources are dedicated to just getting by. It\u0026rsquo;s a significant issue that many people face. Those who have just come out of survival mode are confronted with the challenge of unlearning some of the habits that got them out of survival mode and try to adjust to the new state, often while still carrying the mentality of survival mode.\nLet\u0026rsquo;s take a look, one by one, at the article\u0026rsquo;s arguments and how the above two could affect how to do great work.\nThe four steps PG prescribes the following four steps:\nChoose a field that aligns with your natural aptitude and deep interest (leads to harder work and diligence). Learn about your chosen field until you reach the frontier of knowledge. (Hard work needed). Notice the gaps in knowledge that others might overlook. Explore these gaps (fractal buds), especially the ones that others aren\u0026rsquo;t interested in. (Hard work needed). Now if you are in survival mode, the first step needs to be modified to: \u0026ldquo;Choose a field that aligns with your natural aptitude, can help you get by, and you have a deep interest in\u0026rdquo;. If the deep interest part doesn\u0026rsquo;t directly correlate with the \u0026lsquo;sustain\u0026rsquo; aspect, you will most likely prioritize sustainability; but try to cultivate your interest over time as you stabilize your life. It may not be that difficult if the aptitude part of it is preserved.\nFor those who have recently exited survival mode, they have likely made some compromises in the first step. The challenge lies in breaking free from the survival mentality and allowing themselves to pursue fields that may not immediately contribute to their survival but align with their interests and aptitudes.\nEmbracing curiosity and adaptability PG touches upon the intricate journey of discovering one\u0026rsquo;s true calling. He argues that understanding the essence of a profession requires immersion and experience, often leading to a long, overlapping process of exploration, learning, and self-realization. He prescribes engaging in a broad spectrum of experiences, fostering curiosity and openness to increase the chances of discovering one\u0026rsquo;s passion. PG argues that if a field fails to captivate you as you delve deeper, it\u0026rsquo;s likely not your true calling. The importance of adaptability and the courage to change paths when a more exciting opportunity presents itself is highlighted. Finally, he warns against the distractions of societal pressures and external influences.\nFor survival mode and the life thereafter folks, the most difficult part remains about avoiding distractions due to societal pressures. This gives rise to the additional constraint of needing to \u0026lsquo;get by,\u0026rsquo; and a marked increase in the difficulty level of adaptability and courage. For the folks that are just out of survival, the fear of falling back to it is the biggest deterrent.\nOvercoming Inertia and Procrastination Subsequently, PG touches upon navigating the journey of work requiring strategic management of time and energy. He argues that overcoming the initial inertia to start work often requires self-deception, like underestimating project complexity. He states that completion of projects is vital as it often leads to the most valuable outcomes. Furthermore, he warns of per-project procrastination, which can disguise itself as productivity and suggests regular self-checks to help stay on track.\nThe strategy of self-deception can be particularly useful for those transitioning out of survival mode, who may face additional challenges in starting new projects due to the lingering survival mentality.\nExcellence, consistency and long term value PG highlights the importance of aiming for the best in your field. This can be a challenging but rewarding goal for those in survival mode and for those transitioning out of survival mode.\nConsistency in doing great work is crucial. It\u0026rsquo;s not about getting a lot done every day, but about getting something done consistently. This principle holds true even more for those in survival mode or transitioning out of it. Every small step taken consistently can lead to significant progress over time.\nPG encourages us to aim to create something that will still be valued in a hundred years. This long-term perspective can guide your work and help ensure its lasting impact. For those transitioning out of survival mode, this perspective can provide a beacon of hope and a powerful motivation to strive for greatness, helping them break free from the survival mentality.\nUnlearning misconceptions and embracing experience In the journey from survival mode to a state of thriving, PG emphasizes the need to shed misconceptions and embrace the wisdom of experience. He challenges the passive learning model ingrained by traditional education systems, advocating for an active approach where educators are seen as advisors rather than authority figures.\nFor those transitioning out of survival mode, this shift in perspective can be empowering. It encourages self-reliance and autonomy, essential traits when navigating life beyond survival. PG warns against seeking shortcuts or \u0026lsquo;hacking the test\u0026rsquo; for success, a mindset often adopted in survival mode. Instead, he emphasizes that real achievement comes from addressing overlooked problems and producing quality work.\nPG also advises against depending on external validation or \u0026lsquo;gatekeepers\u0026rsquo; for success. This is particularly relevant for those emerging from survival mode, who may be accustomed to seeking approval or assistance from others. Instead, he encourages focusing on self-improvement and producing quality work.\nFinally, PG highlights the importance of learning from both positive and negative examples and the value of transferring ideas from one field to another. This can be particularly beneficial for those transitioning out of survival mode, as it encourages flexibility and adaptability, key traits for thriving in new environments.\nThe influence of people In the pursuit of greatness, the surrounding people can significantly shape your journey. Colleagues who inspire and challenge you can stimulate your growth and push you towards your goals. As you transition from survival mode, it\u0026rsquo;s crucial to surround yourself with individuals who fuel your optimism and maintain high morale. This positive cycle can enhance your work and drive you towards success. In my small personal experience, individuals who you can look up to due to their own dedication, focus and optimism are a great source of positive energy. Moreover, individuals that are in similar financial position as you and still are driven by things other than money are great motivations.\nYour audience, even if small and dedicated, can provide the necessary motivation and feedback for continuous improvement. Their appreciation and support can be a powerful catalyst, especially when transitioning out of survival mode.\nWhile prestige can be appealing, it\u0026rsquo;s important to remember that the value of your work should not be solely determined by others\u0026rsquo; opinions. Instead, focus on excelling in your chosen field and making it prestigious through your own efforts. Curiosity, a powerful guide, can lead you to new discoveries and achievements.\nIn this journey, the influence of the right people can be a game-changer.\nSummary As you transition from survival mode to a state of thriving to doing great work, remember that the discoveries are out there, waiting to be made. Embracing the right internal and external shifts can go a long way.\n","date":"July 2, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/2023-07-02-great-work/","smallImg":"","tags":[],"timestamp":1688279460,"title":"Survival Mode, Life Immediately After and Paul Graham's How to Do Great Work"},{"categories":[{"title":"Coffee","url":"/categories/coffee/"},{"title":"Life","url":"/categories/life/"}],"content":"Background I got into espresso a few years back. I started out simply enjoying an office machine espresso, but as my interest grew, I found myself venturing to local cafes (these were sparse in early days, but the number has grown over the years in my town) and eventually crafting my own brew at home, over a span of 7 to 8 years.\nAs of today, I own a Baratza Virtuoso Plus grinder And a Gaggia Classic Pro coffee machine. I generally keep on trying different types of coffee bean roasts and origins.\nAlthough I\u0026rsquo;ve not conclusively established a favorite, my preference leans toward medium roasts. My top choices for coffee beans include either Gianyar or Kintamani Bali and Antigua Guatemala. When it comes to darker roasts, Sumatra and Ethiopia are my go-to beans.\nBeing the lone espresso consumer in my household, I typically brew a couple of espresso shots in the morning and, occasionally, an additional pair in the afternoon. It\u0026rsquo;s essential to note that the brewing method may would differ based on the frequency of usage of the machine. The below recipe is for a single daily home brew.\nThe Espresso Recipe Start by measuring 14g of coffee beans for a double shot. Set the grind size on your Baratza Virtuoso Plus grinder to 6 for medium roasts. You may adjust it to 6 or 8 for dark roasts, depending on the specific bean. Proceed to grind the beans. Switch on your Gaggia Classic Pro machine. Attach an empty portafilter to the machine and let it warm up until the first \u0026ldquo;brew\u0026rdquo; light illuminates. Activate the brew button to dispense the first cup of hot water. Once the light is off, turn off the button. Allow the machine to heat up again for the second time, and repeat the process to brew out a second cup of water. Remove and dry the portafilter using a kitchen cloth. Add the freshly ground coffee to the portafilter, and use a coffee tamper to compact the grinds. For best results, use a heavy tamper that fits the portafilter size perfectly. Reattach the filled portafilter to the machine. Activate the steam button to preheat the machine for 15 seconds. Turn off the steam button. The brew light will immediately illuminate. Turn on the brew button to start brewing. Allow the brew to process for about 20 seconds. Ideally, your brew should be a dark brown color, topped with a rich crema. I hope you enjoy this espresso journey as much as I have. Whether you\u0026rsquo;re a seasoned coffee lover or a newcomer, the beauty of coffee making is in the experience and the flavorful sip you earn at the end. Happy brewing!\n","date":"June 2, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/2023-06-02-espresso/","smallImg":"","tags":[],"timestamp":1685686800,"title":"My Go-to Espresso Recipe - An Everyday Brew"},{"categories":[{"title":"Life","url":"/categories/life/"}],"content":"Dear friend,\nI am not sure why I am writing this now. I have thought about it many times, but never really got around to doing it. You have been on my mind since a few days now for some reason, and I have finally decided to write something.\nIt\u0026rsquo;s been 2 years 7 months on this day. I am not sure if I have processed things cleanly until now. I would most probably never be able to forgive myself for not doing more to help you. I am very sorry for that. Most probably I have had a lot of excuses for it.\nYou were a great friend. You were always trying to help others find happiness and make them feel comfortable. Mostly because of it, you had so many friends to share your good times. We did not share the same interests/vices, but I always felt great comfort in knowing that we could talk to each other freely and mostly about any topic under the sun, personal or otherwise. But, as I learned about some things that you were dealing with, I am not so sure anymore. I wish I could have given you more confidence so that you would open up about those things too with me. I wish I would have taken that COVID pass and come to meet you. I wish you never left our company. I wish you never moved out from your brothers place.\nThank you for becoming a friend in a sea of colleagues. Thank you for teaching me your out of the world debugging skills. Thank you for helping me with communicating more openly with people.\nI pray that you have found your peace.\nYour friend.\n","date":"May 25, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/2023-05-25-remembering/","smallImg":"","tags":[],"timestamp":1684953900,"title":"Remembering My Friend"},{"categories":[{"title":"Programming","url":"/categories/programming/"},{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Introduction Have you ever wanted to learn a new programming language or framework but felt overwhelmed and unsure of where to start? Pair programming can offer a solution to this challenge by allowing you to learn from a more experienced developer in real-time. In this case study, we will explore the pair programming experience between me and ChatGPT in the context of learning about \u0026ldquo;Admonitions\u0026rdquo; in Hugo.\nRelevant background I have some small amount of experience in web development, and I am familiar with using Hugo, a popular open-source static site generator. My primary day job experience is with backend technologies and architecture. I am an absolute beginner when it comes to CSS styles, placing and using them in hugo, writing HTML using styles and hugo specific functions.\nI have been wanting to add an admonition that adds each quote in a box, to my quote\u0026rsquo;s page in this blog for some time. With the very limited experience I have in this area, I was not able to create a clean solution for it until now. With rise in ChatGPT\u0026rsquo;s and some experimentation with it, I decided to take on this task.\nWhat are Admonitions in Hugo? Admonitions are blocks of text that emphasize particular information and enhance the visual appeal of a document. They are commonly used to create notes, warnings, tips, and other types of annotations. Admonitions in Hugo can be created using the \u0026ldquo;shortcodes\u0026rdquo; feature, which allows you to add custom content to a page using a simple syntax.\nInteraction with ChatGPT Step 1: Set context Me \u0026gt; Explain admonitions in hugo, give samples related to it, and guide on how to create them. (This was through multiple questions, but no code from my side.)\nChatGPT \u0026gt; ChatGPT provides step-by-step instructions on how to create Admonitions in Hugo using the built-in shortcodes feature and custom CSS styles. I can see an example of adding quotes with HTML and associated CSS, as well as modifying the CSS to highlight the author name differently. ChatGPT also provides HTML code for creating a blockquote shortcode and modifying it to take the author name as an argument rather than as a separate span.\nStep 2: Get code for my problem with input code hints Me \u0026gt; Style the blockquote admonition to match my hugo theme. This also through multiple questions, but this time, relevant code was provided each time.\nChatGPT \u0026gt; I could learn how to modify the CSS styles to match my specific Hugo-themed-Bootstrap theme. ChatGPT provides CSS code for styling the blockquote elements to match the styles used in the theme, including the background color, border color, padding, and font styles for the author name.\nMe \u0026gt; I was unsure on exact placement of CSS files and using them in shortcode in the theme. I asked ChatGPT about it.\nChatGPT \u0026gt; ChatGPT also explains where to add CSS styles to a shortcode in Hugo. I could also learn about the steps to create a CSS file and include it in the HTML template for the site. This time too it gives relevant code blocks.\nStep 3: Non-ChatGPT steps needed At this point, I had a working code, but the font awesome icons were missing in the output as the theme had the icon in fas set and ChatGPT\u0026rsquo;s response had been guiding me to use it from the fa set. Identifying and rectifying them through ChatGPT interaction turned out to be very difficult. I had to go through the general route of exploring themes code, Stack Overflow search through Google, and then fixing it.\nStep 4: Block edit using ChatGPT instead of regex Me \u0026gt; At this point a fully functional and tested shortcode was created. I now needed to use it across all the different quotes I had. Without ChatGPT, I would need to do a regex replace for doing some edits and then do some manual edits where regex was not really possible due to the slightly ad hoc nature of placement of information. I asked ChatGPT to do what I wanted as plain text command and provided input of my full text file.\nChatGPT \u0026gt; ChatGPT was able to do the task of replacing the old \u0026ldquo;highlight\u0026rdquo; built-in admonition, with blockquote admonition, replace the author name from previous text field to the admonition parameter field perfectly. It was not able to reformat a few quotes into Markdown again properly. I decided to manually do that as it was a very minor task.\nExperience on guiding ChatGPT You can see that I needed to guide ChatGPT to the correct answer by asking specific and clear questions related to the topic of Admonitions in Hugo.\nI started by asking the basic question, then basic code, then edits to the code, then rectifying the code to match the specific environment. Even though ChatGPT helped to a large extent, identifying issues and whether the code generated and guidance is relevant to the consumers\u0026rsquo; environment is definitely the user\u0026rsquo;s responsibility. Supplementing with additional context can assist, but the responsibility and the need for user knowledge remains unchanged.\nConclusion This interaction highlights the benefits of pair programming and learning, as it allows for a back-and-forth exchange of information and knowledge. Pairing with ChatGPT can be an effective way to learn about greenfield or brownfield programming concepts for a user.\nThough ChatGPT provides clear and concise instructions, examples, and code snippets to help the user understand and implement the concepts, as a consumer you need to be aware of what you want and what environment you are working with to get better results. There are some areas, where traditional debug and search Google/Stack Overflow is much easier path to solve the problem. Knowing when to move to the traditional method rather than spending time in ChatGPT is a skill to develop.\nWhether you are a beginner or an experienced developer, pair programming with ChatGPT can be a valuable learning experience.\nEpilogue This post itself was reviewed and modified using ChatGPT for spelling, grammar, sentence formulation, and structure. This task went fully without any hassle.\n","date":"February 11, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/2023-02-11-pairprogram/","smallImg":"","tags":[],"timestamp":1676111400,"title":"Beginner Level Learning and Pair Programming With ChatGPT - A Case Study of Admonitions in Hugo"},{"categories":[{"title":"Papers","url":"/categories/papers/"},{"title":"Systems-Design","url":"/categories/systems-design/"}],"content":"Links Amazon DynamoDB at USENIX ATC 22 Amazon Dynamo at SOSP 2007 Notes Good insight into how the evolution worked from Dynamo to DynamoDB.\nHaving a fixed unwavering goal of providing a managed service with fast and predictable performance at any scale is great.\nSystem properties DynamoDB is a fully managed cloud service. DynamoDB employs a multi-tenant architecture DynamoDB achieves boundless scale for tables DynamoDB provides predictable performance. DynamoDB is highly available DynamoDB supports flexible use cases Lessons learnt from the evolution Adapting to customers’ traffic patterns to reshape the physical partitioning scheme of the database tables improves customer experience. Performing continuous verification of data-at-rest is a reliable way to protect against both hardware failures and software bugs in order to meet high durability goals. Maintaining high availability as a system evolves requires careful operational discipline and tooling. Mechanisms such as formal proofs of complex algorithms, game days (chaos and load tests), upgrade/downgrade tests, and deployment safety provides the freedom to safely adjust and experiment with the code without the fear of compromising correctness. Designing systems for predictability over absolute efficiency improves system stability. While components such as caches can improve performance, do not allow them to hide the work that would be performed in their absence, ensuring that the system is always provisioned to handle the unexpected. ","date":"October 18, 2022","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/papers/posts/2022-10-18-dynamodb/","smallImg":"","tags":[{"title":"distributed-systems","url":"/tags/distributed-systems/"}],"timestamp":1666092600,"title":"DynamoDB Paper"},{"categories":[{"title":"Systems-Design","url":"/categories/systems-design/"},{"title":"Architecture","url":"/categories/architecture/"}],"content":"Recently a friend posed a question to our common group: What common problems do you face in building complex, evolving, maintainable systems? Below is the general path that this discussion flowed.\nBroad level architectural thought Main Architectural goal for building large, complex enough and evolving systems is almost always the same: Minimize the resources (people, machines) needed to accommodate change.\nTop level method for doing this is almost always: separation of concerns. Achieving separation of concerns needs you to make tradeoffs. These are people, process, product related. E.g: dev velocity, team coordination, system performance, scalability, availability, failure models, etc.\nAs your org/project grows, the optimal tradeoff point shifts and you do the corresponding changes to adjust to these shifting tradeoffs.\nMulti service integration thought The defined API contract needs to be designed so that it is stable. Proper Resource based rest APIs come in handy for this. This is generally a non-trivial, error prone task for a lot of people, as defining resources you are handling and operations on them for today and tomorrow is very difficult. Same goes for DB schema design in a single service context.\nOne school of thought says that don\u0026rsquo;t worry about tomorrows responsibility as it is impossible to predict. While a good advice, completely ignoring any forward compatibility thought leads to a lot of pain down the line is a general observation.\nSingle service/concern bounded thought Similar to Arch, major issue remain separation of concerns and tradeoffs you make.\nDev\u0026rsquo;s generally tend to start by mixing all things in a single function, class, package, etc. E.g; For a web service, people tend to do transport stuff (SSL, serialization, HTTP), business logic, database handling all as single methods in single place. For non web service process, people tend to handle any communication, threading, thread coordination, configuration, business logic, etc in single place. This mixing can be seen generally in different areas as below.\nObservability: Adding anything related to observability tends to disturb business logic. E.g If you want an api metric to be present, you should be able to do that without touching BL. It generally doesn\u0026rsquo;t happen that cleanly.\nState management and access: State handling is another common thing that starts as \u0026ldquo;accessible to all\u0026rdquo; as it is the simplest thing to start with. E.g: Make all states (Tables, files, blobs, etc) accessible to all functionality. As part of architectural evolution, you start by defining clear boundaries slowly slowly in terms of modules, packages, etc.\nClass/Package issues: People would generally find it very very difficult to define boundaries of packages, classes. This is common even if classes or packages are designed with private/public functional capabilities. E.g: If a function is exposed, should it really be exposed? Is that function part of the responsibility of the class/package?\nAs newer requirements pour into the system, the architectural, service interaction and service responsibility specific tradeoffs change.\nFew examples of these changes within a service boundary level are:\nChanging levels of abstraction - a new class is created out of one big one. This may result in routing calls. Preferred way to handle this is to create a new class, let callers integrate with it, in the mean time redirect from main class to here. If the cost of maintenance turns out to be high, you have to force clients to upgrade. One middle ground here is: provide a sdk, do the rerouting in sdk, ask clients to upgrade the sdk.\nInterface change: especially if parameters are removed. This may result in building a stub to manage it. This is preferably handled via versioning. Backward incompatible changes need to upgrade major versions. Old version stays until you deprecate it. In a single codebase, modifying the callers is almost always preferred over handling rerouting, stubs, etc. Versioning is used when you don\u0026rsquo;t control the callers. Again, tradeoff is cost of modifying everybody, vs maintaining reroutes.\nSize of teams vs rules/patterns One thing that I believe is that the rules/patterns to handle change don\u0026rsquo;t really change. What changes is the tradeoffs associated with picking a solution.\nReferences Blog at a abstract level: Patterns of legacy displacement Details about patterns are present in sidebar. Critical Aggregator Divert the Flow Extract Product Lines Feature Parity Legacy Mimic Revert to Source Transitional Architecture Books that I like: Software Architecture the hard parts Clean Architecture Architectural bookshelf with different levels/context of the problems: Architect bookshelf Architect library all ","date":"October 18, 2022","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/2022-10-18-archlevels/","smallImg":"","tags":[],"timestamp":1666089000,"title":"Separation of Concerns and Architectural Thought"},{"categories":[],"content":"Interests For a large mount of time I used to be quite voracious in different areas of interests/hobbies. These were different things at different points of time in my life. Movies, music, books about technology and science fiction, building software systems were the main interests until now.\nFor books, the voraciousness lasted a bit longer for technology ones and to some extent for science fiction. I didn\u0026rsquo;t really get to a large number of non-tech books, but the general approach to go about it was very much similar i.e pickup, continue to the end and don\u0026rsquo;t worry about much else.\nI am not sure when I developed a taste for movies. But I watched a lot of movies. There was a stretch of time, when I used to consume upto four/five per week minimum. TV series binge watch was also present to some extent, but movies were always the primary interest. At some point I decided to keep a track of what I watch on IMDB. As of now, I have almost 1550 titles to my watched/rated list (very few were added in the last few years though).\nI sought out music from anything and anywhere. Source of discovery came from recommendation engines, suggestions from select friends whose taste I trusted, even billboard top charts for each year. This exposed me to music of different moods and flavours. My playlists were generally a mixed jumble of eras and genres.\nBuilding software systems, that could handle things that I care about, has always interested me. It could be streaming services, local movie organization methods, writing systems that could juggle a lot of activities, software helping me organize my life in certain ways are a few areas. This also resulted in me growing interested in architecture and wanting to organize software itself for organizational goals.\nStages As an undergrad, my voraciousness mainly applied to movies, books about technology, music and some literature.\nDuring my masters, literature mostly dried up, and was replaced with building and managing different technology systems. I even managed to merge two of my interests to create a small movie streaming service for on-campus consumption by students.\nDuring my first job, books of all sorts were pretty much removed. With some dis-interest in the actual job, it was actually replaced with a feeling of void.\nMy second(current) job offered great learning and experimenting opportunities w.r.t building systems. That helped in filling the void to some extent. As I grew into the job, movies dried up to some extent. Music discovery stopped and it went into a mode of listening the same known things again and again. Books about technology did pick up as a job requirement, but the voraciousness to go about it was missing.\nChange As I progressed through my career, slowly but surely, the number of things I had to take care of increased. Upto a point, I was ok with the context switches and some associated parallelism. I think, things were ok until I was able to focus on a single thing for a while, and then switch the context to a new item. Even in this mode, the voraciousness was definitely lesser, but still present to some extent. Mainly because able to focus is one thing, and being able to do it in a voracious manner is another.\nSomehow, I also grew a bit rapidly on the engineering ladder. This directly corresponds to a increase in the amount of responsibilities and additional number of things to look into. Few people specialize in depth of a topic, but my interests in building systems meant I looked at breadth a lot, plus glue work associated with it. Initially I could go into large depths too with some limited breadth, but that changed as I grew. The scale of the issue could be grasped by considering that at times I handled more than a dozen active projects along with a few in maintenance. When this started overwhelming me, I tried out a model where I was deep into a couple of projects and rest all were in a consultancy mode. As the criticality of things increased I had to put few of them under the deep involvement mode rather than consultancy.\nThe company definitely rewarded the work in different ways. Also, I did lots and lots of things that were super interesting to me. Given that I actually enjoyed things, I was able to gain back some of the voraciousness as things permitted.\nCurrent thought I am starting to believe that even though I thrive when I handle a breadth of things, it is not sustainable for my mental health and general happiness. It is irrespective of the fact that, career wise, precisely this has helped me progress. I am not really sure of the solution to this at this point, even though I am aware of it and definitely struggling with it.\nI have been told that this type of change is definitely expected as you grow in technology. Whether, I accept it and find a way to live with it or make a change for gaining back that voraciousness is upto me. I am inclined towards the later as it seems to be the only way I can imagine gaining back satisfaction and happiness, but I am not sure about lateral implications of it.\nAnother suggestion was to see if there are different hobbies that can interest me and don\u0026rsquo;t really need me to be voracious about it. Out of the multiple things I tried gardening is the only one that has stuck and genuinely interested me. It doesn\u0026rsquo;t really feel like the only thing that is going to be there, but it will definitely be one to continue for a while.\nIF I find some list of newer things, along with a few old (I wouldn\u0026rsquo;t want to let music and movies to go away from me), keeping professional multi tasking to a minimum and finding a balance between professional and personal commitments and the interests could be the way ahead. In any case, it is really hard for me to imagine getting back on a thing that I can really be voracious about. Few friends have suggested that I don\u0026rsquo;t need to have voraciousness for happiness, but the thought of it makes me really uncomfortable.\nIt is definitely clear in my mind that I need to get rid of the dryness that exist in current procrastination, movie or music explorations. All this has affected my physical fitness too. Gaining that back to some extent has also been suggested as a thing that would help me freshen up a bit, but that too seems like a large arduous as of now.\nAll in all, the present looks like an uncomfortable time for me. Writing things down generally helps me build my own clarity and I hope to get the same out of this particular write up. Hopefully I achieve this clarity sooner rather than later.\nEdit 1: Suggestion by James from HN\nGood rest, taking care of your health (physical exercise, eating well, sleeping well), and lowering your stress levels. Find what you love right now and take small steps into recultivating doing something you love doing.\n","date":"July 9, 2022","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/2022-07-09-voraciousness/","smallImg":"","tags":[],"timestamp":1657362600,"title":"Voraciousness"},{"categories":[],"content":"About me\n","date":"March 12, 2022","img":"","lang":"en","langName":"","largeImg":"","permalink":"/about/","smallImg":"","tags":[],"timestamp":1647043200,"title":"About"},{"categories":[],"content":" Life Information is not knowledge\nKnowledge is not wisdom\nWisdom is not truth\nTruth is not beauty\nBeauty is not love\nLove is not music\nMusic is the best.\n- Frank Zappa\nI have this thought experiment I do in moments like that\u0026hellip;.\nI imagine being nothing at all. Dead and gone.\nAnd while being dead and gone and nothing, you were allowed to re-live just one moment again of your long lost life for a just a couple minutes and it just so happens to be the one you are in living in right now.\nIts an amazing feeling. You will see your life with rare fresh eyes for just a few seconds. And then life goes on\u0026hellip;.\n- Kurt Vonnegut\nBe kind, for everyone is fighting a hard battle.\n- Ian MacLaren\nA life spent making mistakes is not only more honorable, but more useful than a life spent doing nothing.\n- George Bernard Shaw\nSecurity is mostly a superstition. Avoiding danger is no safer in the long run than outright exposure. Life is either a daring adventure, or nothing.\n- Helen Keller\nShare your knowledge. It’s a way to achieve immortality.\n- Dalai Lama\nI said to my soul, be still, wait without hope For hope would be hope for the wrong thing.\n- T.S. Elliot\nHumor is the only divine quality to be found in humanity.\n- Schopenhauer\nWe are shaped and fashioned by what we love.\n- Johann Wolfgang von Goethe\nAbove all, don’t fear difficult moments. The best comes from them.\n- Rita Levi Montalcini\nTake the path to Nothing, and go Nowhere until you reach it.\n- The tao of Pooh\nSelf Eventually, I decided that thinking was not getting me very far and it was time to try building.\n- Rob Pike\nIt’s possible that I understand better what’s going on, or it’s equally possible that I just think I do.\n- Russ Cox\nInspiration does exist, but it must find you working.\n- Pablo Picasso\nReality is what refuses to go away when I stop believing in it.\n- Philip K. Dick\nIf you don’t know where you are going, every road will get you nowhere.\n- Henry Kissinger\nThere is nothing worse than imagination without taste.\n- Johann Wolfgang von Goethe\nPerfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.\n- Antoine-Marie- Roger de Saint-Exupery. Wind, Sand and Stars\nFanaticism consists in redoubling your efforts when you have forgotten your aim.\n- Santayana\nThey always say time changes things, but you actually have to change them yourself.\n- Andy Warhol\nIf you obey all the rules, you will miss all the fun.\n- Katharine Hepburn\nIf you can’t get rid of the skeleton in your closet, you’d best teach it to dance.\n- George Bernard Shaw\nIf you’re the smartest person in the room, go look for a room with smarter people in it.\n- Unknown\nCuriosity is insubordination in its purest form.\n- Vladimir Nabokov\nA good leader is someone whose troops will follow him, if only out of curiosity.\n- Gen. Colin Powell\nA superior pilot uses his superior judgment to avoid having to exercise his superior skill.\n- Frank Borman\nThe shortest path to exceeding expectations doesn’t generally pass through meeting expectations.\n- Ward Cunningham\nYour mind is credulous enough to believe any narrative you feed it. Choose wisely.\n- Stephen Sadowski\nThe most personal is the most creative.\n- Martin Scorsese\nMorality Never let your sense of morals prevent you from doing what’s right.\n- Isaac Asimov\nThere are no whole truths: all truths are half-truths. It is trying to treat them as whole truths that plays to the devil.\n- Alfred North Whitehead\nMorality is doing what’s right regardless of what you’re told. Obedience is doing what you’re told regardless of what is right.\n- Unknown\nPeople You must defend people you disagree with, it is how you find out what your principles really are.\n- Penn Jillette\nBrandolini’s law: The amount of energy needed to refute bullshit is an order of magnitude bigger than to produce it.\n- Alberto Brandolini\nA lie is halfway round the world before the truth has got its boots on.\n- Old proverb\nThe power of accurate observation is often called cynicism by those who have not got it.\n- George Bernard Shaw\nThe reasonable man adapts himself to the world. The unreasonable man persists in trying to adapt the world to himself. All progress, therefore, depends upon the unreasonable man.\n- George Bernard Shaw\nFools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.\n- Alan Perlis\nThere are some ideas so wrong that only a very intelligent person could believe in them.\n- George Orwell\nIt takes considerable knowledge just to realize the extent of your own ignorance.\n- Thomas Sowell\nNever attribute to malice that which can be adequately explained by stupidity.\n- Hanlon’s razor\nGreat spirits have always found violent opposition from mediocrities. The latter cannot understand it when a man does not thoughtlessly submit to hereditary prejudices but honestly and courageously uses his intelligence.\n- Albert Einstein\nOne is never so dangerous as when he’s utterly convinced he is right.\n- John Perry Barlow\nI like offending people because I think people who get offended should be offended.\n- Linus Torvalds\nMiscellaneous Too often we enjoy the comfort of opinion without the discomfort of thought.\n- John F. Kennedy\nA witty saying proves nothing.\n- Voltaire\nThe future is always scary to those who cling to the past.\n- Tim O'Reilly\nThe future has a way of arriving unannounced.\n- George F. Will\nGood communication is as stimulating as black coffee, and just as hard to sleep after.\n- Anne Morrow Lindbergh\nTechnology Parkinson\u0026rsquo;s law of triviality: Members of an organization give disproportionate weight to trivial issues.\nBikeshedding (Metaphor): Futile investment of time and energy in discussion of marginal technical issues.\n- C. Northcote Parkinson\nWe should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.\n- Donald Knuth, Tony Hoare\nRules of Programming\nYou can\u0026rsquo;t tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don\u0026rsquo;t try to second guess and put in a speed hack until you\u0026rsquo;ve proven that\u0026rsquo;s where the bottleneck is. Measure. Don\u0026rsquo;t tune for speed until you\u0026rsquo;ve measured, and even then don\u0026rsquo;t unless one part of the code overwhelms the rest. Fancy algorithms are slow when n is small, and n is usually small. Fancy algorithms have big constants. Until you know that n is frequently going to be big, don\u0026rsquo;t get fancy. (Even if n does get big, use Rule 2 first.) Fancy algorithms are buggier than simple ones, and they\u0026rsquo;re much harder to implement. Use simple algorithms as well as simple data structures. Data dominates. If you\u0026rsquo;ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming. Pike\u0026rsquo;s rules 1 and 2 restate Donald Knuth/Tony Hoare\u0026rsquo;s famous maxim: Premature optimization is the root of all evil. Ken Thompson rephrased Pike\u0026rsquo;s rules 3 and 4 as: When in doubt, use brute force. Rules 3 and 4 are instances of the design philosophy KISS. Rule 5 was previously stated by Fred Brooks in The Mythical Man-Month. Rule 5 is often shortened to: write stupid code that uses smart objects. Reference - Rob Pike\nIncompleteness theorem:\nAny … formal system capable of expressing elementary arithmetic cannot be both consistent and complete. In particular, for any consistent, … formal system that proves certain basic arithmetic truths, there is an arithmetical statement that is true, but not provable in theory\n- Gödel\n","date":"March 12, 2022","img":"","lang":"en","langName":"","largeImg":"","permalink":"/quotes/","smallImg":"","tags":[],"timestamp":1647043200,"title":"Quotes"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"I had to setup a fresh Ubuntu dev machine after quite some time. Given that this was a loaner machine, I wanted to make sure that I have a minimal viable dev setup ready as quickly as possible.\nBelow are the steps for the minimal things I need.\nUpgrade packages For a fresh setup it is better to first make sure that everything that is upgradable is up to date. If you have a specific version requirement for any package make sure you pin it at the package manager level.\nBasic commands\n1 2 3 4 sudo apt update sudo apt upgrade sudo apt install software-properties-common apt-transport-https wget zsh git vim tree sudo apt autoremove ZSH setup ZSH is an extended Bourne shell.\nTogether with Oh-My-ZSH it provides a delight full dev experience.\nI personally like to use the agnoster theme from ohmyzsh with the plugins git common-aliases zsh-syntax-highlighting zsh-autosuggestions\nFor Ubuntu terminal make sure you got to Terminal -\u0026gt; Preferences -\u0026gt; \u0026lt;Your Profile\u0026gt; -\u0026gt; Colors and uncheck the Use system colors option so that the theme colors are used in the terminal.\nOhmyzsh standard plugins do not require explicit installation. Community plugins require some installation. Plugins links and installation guides are:\ncommon-aliases zsh-syntax-highlighting zsh-autosuggestions My simple ~/.zshrc file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # If you come from bash you might have to change your $PATH. # export PATH=$HOME/bin:/usr/local/bin:$PATH # Path to your oh-my-zsh installation. export ZSH=\u0026#34;/home/username/.oh-my-zsh\u0026#34; ZSH_THEME=\u0026#34;agnoster\u0026#34; # Which plugins would you like to load? # Standard plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=(git common-aliases zsh-syntax-highlighting zsh-autosuggestions) source $ZSH/oh-my-zsh.sh export HISTSIZE=100000 export SAVEHIST=100000 SSH key-gen and add to repositories Interacting with multiple hosted git repositories is much smoother when using SSH keys.\nSpecific git hosts provide their guides to do this, e.g: GitHub ssh key gen guide .\nGeneral setup includes:\nGenerate a ssh key pair on a machine. Add it to your git host profile settings. Test ssh access to git 1 2 3 4 5 6 ssh-keygen -t ed25519 -C \u0026#34;email@example.com\u0026#34; ssh-keygen -t ed25519 -C \u0026#34;username@example.com\u0026#34; xclip -sel clip \u0026lt; ~/.ssh/id_ed25519.pub # Add your git host (GitLab/GitHub/BitBucket, etc) URL for git-example.com ssh -T git@git-example.com Basic software install VSCode. General post for VSCode helpers is here Slack Zoom Hugo . Hugo is fantastic website building framework. Awesome for static sites. Programming language settings Go. Basic introductory primer is present here . Python. Getting started link Pull your code and go exploring :)\n","date":"July 24, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/linux/posts/2020-07-24-ubuntu-setup/","smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"ubuntu","url":"/tags/ubuntu/"},{"title":"commands","url":"/tags/commands/"}],"timestamp":1595568600,"title":"Linux - Ubuntu Initial Dev Setup"},{"categories":[{"title":"Papers","url":"/categories/papers/"},{"title":"Systems-Design","url":"/categories/systems-design/"}],"content":"Below are the steps recommended to read the Paxos made simple paper by Leslie Lamport and understand Paxos.\nSteps Read full paper.\nPaxos made simple “Begin at the beginning,” the King said gravely, “and go on till you come to the end: then stop.” - The King. Alice in wonderland. Re-look at why is \u0026ldquo;leader election required\u0026rdquo;. 2.5 -\u0026gt; 2.4 -\u0026gt; 2.3\nRe-look the requirements for proposer P2c -\u0026gt; P2b -\u0026gt; P2a -\u0026gt; P2\nRe-look the requirements for acceptor P1a -\u0026gt; P1\nGo through the algorithm again. i.e Phase 1 and Phase 2.\nRepeat 2-4 again. Do 1-4, if still not sure.\n","date":"May 25, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/papers/posts/2020-05-25-understanding-paxos/","smallImg":"","tags":[{"title":"distributed-systems","url":"/tags/distributed-systems/"}],"timestamp":1590388200,"title":"Understanding Paxos"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Docsify, YAML front-matter, mustache templates \u0026amp; tags and some quirks when using them.\nDocsify Docsify is a great documentation site generator.\nIt generates your documentation website on the fly using Markdown files directly. To start using it, all you need to do is create an index.html and deploy it on GitHub pages or any other static site host. It has a great plugin system that enables extensibility and can be used for solving multiple use cases. Docsify-Mustache One such plugin that is greatly useful is Docsify-Mustache .\nIt allows preprocessing markdown documents with Mustache template engine. Mustache is a logic-less templating system. It works by expanding tags in a provided template using values provided in a hash or object. E.g: If you use {{name}} as template in your markdown and provide the value for name either via YAML front-matter or any other supported sources , that value will get rendered. How to use this plugin with docsify is very well explained in the documentation site for this plugin. Mustache tags Mustache supports different types of tags as documented in mustache manual . The basic tags, that were useful to me, when dealing with a documentation site are Variables, Sections with non-empty lists and Inverted sections. Below are a few examples on using these mustache tag types. I have considered the source of the \u0026ldquo;values\u0026rdquo; as YAML front-matter in markdown but as pointed out before, the source can be any supported input type. Variables Variables are the most basic tag type in mustache. The template for accessing a variable is {{variable_name}}.\nExample:\nConsider that you declare the following YAML front-matter in your markdown document:\n1 2 3 4 --- title: My awesome project documentation category: Useful --- Now, if you want to refer this in the markdown file you can add:\n1 2 3 {{title}} This project belongs to category: {{category}} When rendering the page title and category will be substituted using the values declared in the front matter. Sections with non-empty lists Sections render blocks of text one or more times, depending on the value of the key in the current context.\nA section begins with a pound and ends with a slash. That is, {{#person}} begins a \u0026quot;person\u0026quot; section while {{/person}} ends it.\nWhen the value for a section is a non-empty list, the text in the block will be displayed once for each item in the list. The context of the block will be set to the current item for each iteration. In this way we can loop over collections.\nIMPORTANT NOTE: If the list values contain a hyphen - in them then the list rendering is incorrect/fails for that value. To avoid this use single quotes (\u0026rsquo;\u0026rsquo;) around the value as depicted below.\nExample:\nConsider that you declare the following YAML front-matter in your markdown document:\n1 2 3 --- tags: [useful, \u0026#34;rocket-science\u0026#34;, launch] --- Now, if you want to refer the tags list in the markdown file you can add:\n1 2 3 4 This doc is has the following tags: {{#tags}} {{.}} {{/tags}} Output will be rendered as:\n1 This doc is has the following tags: useful, rocket-science, launch Inverted sections Inverted sections may render text once based on the inverse value of the key. That is, they will be rendered if the key doesn\u0026rsquo;t exist, is false, or is an empty list.\nAn inverted section begins with a caret (hat) and ends with a slash. That is {{^person}} begins a \u0026ldquo;person\u0026rdquo; inverted section while {{/person}} ends it.\nExample:\nConsider that you declare the following YAML front-matter in your markdown document:\n1 2 3 --- tags: [] --- Now, if you want to handle the tags list being empty and check for category being absent you can add:\n1 2 3 4 5 6 7 8 This doc is has the following tags: {{^category}} No category found !!! {{/category}} {{^tags}} No tags found !!! {{/tags}} Given that the categories key doesn\u0026rsquo;t exist and the tags list is empty, Output will be rendered as:\n1 2 No categories found !!! No tags found !!! Extended example An extended example where we add a YAML front-matter to a markdown file, use the variables and handle the absent cases is given below.\nMarkdown file that adds a constant heading section to the documentation page, where the title will be displayed first, then category will be displayed and then the tags list is provided:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 --- title: My awesome project documentation tags: [useful, \u0026#34;rocket-science\u0026#34;, launch] --- # {{title}} {{category}} {{^category}} No category found !!! {{/category}} Tag list: {{#tags}} {{.}} {{/tags}} {{^tags}} No tags found !!! {{/tags}} The output rendered will be:\n1 2 3 4 5 My awesome project documentation No category found !!! Tag list: useful, rocket-science, launch Example project Most of the above mentioned concepts and tools are used at my tech-interview-prep project site. That can act as a good reference.\n","date":"April 29, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/markdown/2020-04-29-docsify-mustache/","smallImg":"","tags":[{"title":"markdown","url":"/tags/markdown/"},{"title":"yaml","url":"/tags/yaml/"},{"title":"front-matter","url":"/tags/front-matter/"},{"title":"mustache","url":"/tags/mustache/"},{"title":"docsify","url":"/tags/docsify/"}],"timestamp":1588129200,"title":"Mustache Templates and YAML Front-Matter With Docsify"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Basic shortcuts, useful plugins, and sample settings file for VSCode.\nThis is a short list that should help anyone to get started with VSCode. It does not go into advanced mode or doesn\u0026rsquo;t serve as a long \u0026ldquo;cheat sheet\u0026rdquo;. Intention is to help in getting started rather than doing advanced stuff.\nBasic shortcuts Description Mac Linux New file cmd(⌘) n ctrl n Search in file cmd(⌘) f Ctrl f Search across files cmd(⌘) shift(⇧) f ctrl shift f Go to Definition f12 f12 Go back ctrl(⌃) - ctrl - Go to file cmd(⌘) p ctrl p Open command pallette cmd(⌘) shift(⇧) p ctrl shift p Replace in file cmd(⌘) option(⌥) f ctrl alt f Replace across files cmd(⌘) shift(⇧) h ctrl shift h Plugins Name Description GitLens Git supercharged Python Full python support. Lint, debug, intellisense, format, etc Go Full Go support. Lint, debug, intellisense, format, etc Markdown All in One All you need to write Markdown. Keyboard shortcuts, table of contents, auto preview and more Markdownlint Markdown lint and style check Code spell checker Spelling checker for source code Prettier Prettier/Formatter for multiple formats Regex Description regex Search any character or new line `((. Group things and access in replace Add things in ( and ) and access as $1,\u0026hellip; ","date":"April 28, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/linux/posts/2020-04-28-vscode/","smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"mac","url":"/tags/mac/"},{"title":"vscode","url":"/tags/vscode/"},{"title":"utilities","url":"/tags/utilities/"},{"title":"commands","url":"/tags/commands/"}],"timestamp":1588042800,"title":"VSCode Basic Helpers"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Few git commands.\nDescription Command Delete all branches locally except for ones having the word \u0026ldquo;master\u0026rdquo; `git branch Pull submodules initially git submodule update --init --recursive Update submodules git submodule update --recursive --remote Clone using username pass in URL `git clone http://${GIT_USERNAME}:$(echo -n $GIT_PASSWORD ","date":"March 27, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/linux/posts/2020-03-27-git-commands/","smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"git","url":"/tags/git/"},{"title":"utilities","url":"/tags/utilities/"},{"title":"commands","url":"/tags/commands/"}],"timestamp":1585281120,"title":"Linux - Git Commands"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Generic references and points to consider when doing a memory analysis with go programming language.\nDo pprof memory profiling .\nGo returns memory to OS gradually. Typical time is ~5 minutes. If immediate return is needed, we could use FreeOSMemory . General recommendation is that if this is needed, manage memory alternatively.\nAlternative for frequent allocated and reused objects is sync.Pool usage. This is tricky and have to be careful when doing this. Sample usage can be found in blog .\nExcellant High performance go tips are avilable at this post . This talks about memory and GC too.\nGarbage collection behaviour is well explianed at: Ardan labs Post 1 , Post 2 and Post 3 . Also there is this keynote explaining the evolution of Go\u0026rsquo;s garbage collector.\n","date":"March 24, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/go/posts/2020-03-24-go-memory-profiling/","smallImg":"","tags":[{"title":"golang","url":"/tags/golang/"},{"title":"guidelines","url":"/tags/guidelines/"},{"title":"profiling","url":"/tags/profiling/"}],"timestamp":1585028460,"title":"Memory Analysis in Go"},{"categories":[{"title":"Movie","url":"/categories/movie/"},{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Organizing a local storage based movie collection. At a high level it involves:\nPrepare movie metadata Renaming and folder arrangement Manage movies in Kodi Prepare movie metadata Use TinyMediaManager i.e tmm for metadata management\nStep 1: Prepare source folders:\nImport local movie paths These are called as sources in tmm. Add these via settings Clean duplicates Manage multi file movies Naming convention is important. Files should end with -cd1, -cd2, etc or -part1, -part2, etc. Bulk Subtitles find and download is generally a bad idea. Lot of inaccuracies in downloads. Better do this one by one and before any renaming of files. Step 2: Scrape metadata\nGenerally prefer Kodi format metadata (nfo) files. tmm provides option for this in the setting. IMDb vs TMDb metadata IMDb scrapping generally is slow for bulk operations TMDb provides a good source for movie metadata and most of it (including fan art and posters) can be downloaded from here. I prefer rating from IMDb. There is an option to select just ratings from IMDb in tmm I would recommend doing a two pass metadata search In the first pass do a bulk operation using TMDb scrapper. This can include TMDb ratings. Once all metadata is downloaded a second bulk search can be done just for ratings and top 250 data using IMDb. Renaming and folder arrangement This step move movies to a Kodi recommended structure using tmm. CAUTION Once renaming is complete it cannot be undone. Verify each and every thing before doing renaming. Recommended folder structure is movie-name (year). Generally prefer a flat structure over sub-directories and deep hierarchies. General preference for file names is same as folder name. I personally prefer movie-name (year) video-resolution imdb-rating part-no. Once folder name and file name preferences are set in Settings-\u0026gt;Movies-\u0026gt;Renamer, do a dry run to see the changes that tmm is going to do. Verify the dry run result carefully. Adjust settings if something seems weird. Execute rename once verified. Manage movies in Kodi Install Kodi on your laptop/desktop/tv. Import the media folder created using tmm above in Kodi media manager. As a general setting enable Update library on startup. Cleaning DB in Kodi is a bit of a pain. Avoid folder/movie path changes. Keep running clean library even for smaller changes done to files/folders. Periodically i.e once you have watched enough movies you may want to do a export library. This writes watched status and any extra info in Kodi to .nfo files in source. ","date":"March 17, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/movie/2020-03-17-organizing/","smallImg":"","tags":[{"title":"movie","url":"/tags/movie/"},{"title":"linux","url":"/tags/linux/"},{"title":"ubuntu","url":"/tags/ubuntu/"},{"title":"kodi","url":"/tags/kodi/"}],"timestamp":1584444180,"title":"Movies - Organizing a Largish Movie Collection"},{"categories":[{"title":"Papers","url":"/categories/papers/"}],"content":" Lifes irreducible structure Paxos made simple The Google file system - GFS Amazon DynamoDB at USENIX ATC 22 Dynamo: Amazon’s Highly Available Key-value Store MapReduce: Simplified Data Processing on Large Clusters TAO: Facebook’s Distributed Data Store for the Social Graph Dapper, a Large-Scale Distributed Systems Tracing Infrastructure Bigtable: A Distributed Storage System for Structured Data Papers we love github repo ","date":"March 12, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/papers/posts/2020-03-12-awesome-papers/","smallImg":"","tags":[{"title":"lists","url":"/tags/lists/"}],"timestamp":1583982000,"title":"Awesome Papers List"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Steps to set up a samba server on ubuntu 18.04.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 sudo apt update sudo apt install samba # Allow Samba in ufw firewall sudo ufw allow \u0026#39;Samba\u0026#39; sudo systemctl status smbd # Create a directory to host Samba share sudo mkdir /disk1/samba #### User setup sudo useradd -M -d /disk1/samba/peewee -s /usr/sbin/nologin -G sambashare peewee sudo mkdir /disk1/samba/peewee sudo chown peewee:sambashare /disk1/samba/peewee sudo chmod 2770 /disk1/samba/peewee sudo smbpasswd -a peewee # set password here sudo smbpasswd -e peewee vi /etc/samba/smb.conf ## Add these to the globals section to avoid name mangling and using appropriate charset # [globals] mangled names = no dos charset = CP850 unix charset = UTF-8 [peewee] path = /disk1/samba/peewee browseable = yes read only = no force create mode = 0660 force directory mode = 2770 valid users = peewee sudo systemctl restart smbd sudo systemctl restart nmbd ","date":"January 30, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/linux/posts/2020-01-30-samba-setup/","smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"samba","url":"/tags/samba/"},{"title":"utilities","url":"/tags/utilities/"},{"title":"scripts","url":"/tags/scripts/"},{"title":"commands","url":"/tags/commands/"}],"timestamp":1580401500,"title":"Samba Setup"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Few ubuntu server setup issues and corresponding steps to debug them.\nDisabling floppy drive: Error: print_req_error: I/O error, dev fd0, sector 0\n1 2 3 sudo rmmod floppy sudo echo \u0026#34;blacklist floppy\u0026#34; | sudo tee /etc/modprobe.d/blacklist-floppy.conf sudo dpkg-reconfigure initramfs-tools Error: Network not up: eth/ens doesnt show or no service network-manager\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 sudo dhclient sudo apt update sudo apt install network-manager ifupdown sudo service network-manager restart sudo systemctl status NetworkManager.service sudo vi /etc/netplan/01-netcfg.yaml # This file describes the network interfaces available on your system # For more information, see netplan(5). network: version: 2 renderer: NetworkManager ethernets: ens32: dhcp4: yes sudo netplan generate sudo netplan apply ssh setup\n1 2 3 4 5 6 ## For regenerating only rsa key sudo ssh-keygen -t rsa -b 4096 -f ssh_host_rsa_key ## For regenerating all missing keys sudo ssh-keygen # service ssh restart sudo systemctl status ssh Fix non-configured locales\n1 2 sudo locale-gen en_US en_US.UTF-8 sudo dpkg-reconfigure locales ","date":"January 30, 2020","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/linux/posts/2020-01-30-ubuntu-1804-server-debug/","smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"ubuntu","url":"/tags/ubuntu/"},{"title":"debug","url":"/tags/debug/"},{"title":"commands","url":"/tags/commands/"}],"timestamp":1580397900,"title":"Linux - Ubuntu 18.04 Server Setup Debug"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Generic references to get started with go programming language.\nGetting started links Installation How to Write Go code Tour of Go Effective Go Reference documentation Project layout Package Oriented Design Style guide Standard project layout Naming conventions Standard Package names go blog Go Talk Few important rules: Package names are singular, short, clear, lower case, with NO under_scores or mixedCaps. Package content: Avoid stutter, simplify function names. Avoid meaningless package names such as util, lib, common, or misc. Function and variable names: The convention in Go is to use MixedCaps or mixedCaps rather than underscores to write multiword names. Keep local variables short. Common variable/type combinations can use really short names. E.g: ‘i’ - for index, ‘r’ for reader, ‘b’ for buffer. Acronyms should be all capitals: E.g: ServeHTTP and IDProcessor Validation: Use gofmt for autoformatting your code. Use golint . It would provide warnings related to naming and styling of go code. Code comments Standard Go Blog Few important rules: The convention is simple: to document a type, variable, constant, function, or even a package, write a regular comment directly preceding its declaration, with no intervening blank line. Godoc will then present that comment as text alongside the item it documents. The comment is a complete sentence that begins with the name of the element it describes. Comments on package declarations should provide general package documentation. Use doc.go for packages that need large amount of introductory documentation. Swagger documentation for APIs: Can use code annotations as described at GoSwagger Generic guidelines Writing clear idiomatic Go code: Effective Go Few important rules: Dependencies should be passed explicitly. E.g: Pass logger explicitly. Do NOT keep unused functions, constants, variables, types. Do NOT use panics/recover as exception catching mechanism. Avoid blanket error handling. Avoid Misusing errors. Avoid long functions. A function should not exhibit split personality. Avoid global objects. Validation: Static check Race detector Vet CI: GolangCI-Lint Testing Guidelines: Go provides command go test for running tests in \\*\\_test.go files. It also has support for benchmarking. go test has support for race detector using - race. Use it while running tests. Test file containing component tests should specify the build constraints so that files can be identifiable whether it has Unit or Component or Integration test. The build constraints will be helpful to exclusively run only UT or Component tests or Integration tests. Command “go test ./… -tags UT” will only run unit test file and will exclude file component_test.go as it as define build constraint “!UT” E.g File component_test.go // +build !UT … some tests Tools: Package for boiler plate test code generation: gotests This is available as a plugin in VSCode and other major IDEs. Package for generating mocks for interfaces: mock Package for mocking SQL: go-sqlmock Test helpers: testing Measuring code coverage Go test can be configured -cover to collect code coverage information. It does not have support to find code coverage in workflow testing. But can be tweaked to collect coverage information by writing test for entry point function of binary. ","date":"November 17, 2019","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/go/posts/2019-11-17-go-intro-primer/","smallImg":"","tags":[{"title":"golang","url":"/tags/golang/"},{"title":"guidelines","url":"/tags/guidelines/"},{"title":"learning","url":"/tags/learning/"}],"timestamp":1574004300,"title":"Go Introductory Primer"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Basic docker commands.\nCommands Description Command List all container instances, with their ID and status docker ps -a Lists all images on the local machine docker images Displays the logs from a running container docker logs [container name or ID] Stop all containers docker stop $(docker ps -a -q) Delete all containers docker rm $(docker ps -a -q) Changes command prompt from the host to a running container docker attach [container name or ID] Executes a command within a running container docker exec [container name or ID] shell command ","date":"November 11, 2019","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/linux/posts/2019-11-11-docker-commands/","smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"docker","url":"/tags/docker/"},{"title":"utilities","url":"/tags/utilities/"},{"title":"commands","url":"/tags/commands/"}],"timestamp":1573489500,"title":"Docker - Commands"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"Random collection of commands for Ubuntu Linux.\nTop Description Command display top with threads top -H top with output sorted by memory top -o %MEM run top in batch mode 10 times with 5 seconds delay in command mode with output sorted by memory top -b -n 10 -d 5 -c -o %MEM run top in batch mode 10 times with 5 seconds delay in command mode with output sorted by memory and only print 15 lines at a time `top -b -n 10 -d 5 -c -o %MEM Jekyll Reference - Using with bundler Description Command serve jekyll locally bundle exec jekyll serve Virtualbox Description Command create a vmdk using raw device VBoxManage internalcommands createrawvmdk -filename \u0026quot;\u0026lt;/path/to/file\u0026gt;.vmdk\u0026quot; -rawdisk /dev/sdb Rsync Description Command rsync to a remote server using ssh protocol and show progress rsync -avzhe ssh --progress ./localfolder user@\u0026lt;remote server name/ip\u0026gt;:/remote/folder/location Option to transfer files upto a certain size --max-size=\u0026lt;n\u0026gt;m Disk paritions Create a ntfs partition from an empty disk\n1 2 3 4 5 6 7 8 9 10 11 12 13 sudo fdisk /dev/sdb # fdisk is interactive # press m for help # Press p to list any available partitions # create a new partition by using n # after altering partitions press w to write # make a ntfs file system with \u0026#34;quick format\u0026#34; i.e dont write zeroes and dont check for bad sectors # remove f for full format mkfs.ntfs -f /dev/sdb1 blkid # Note the UUID of the partition E.g: /dev/sdb1 UUID=\u0026#34;asdfg1246\u0026#34; # Adding a entry in /etc/fstab UUID=asdfg1246 /disk1 ntfs-3g permissions,locale=en_US.utf8 0 2 ","date":"November 10, 2019","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/linux/posts/2019-11-10-commands/","smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"ubuntu","url":"/tags/ubuntu/"},{"title":"utilities","url":"/tags/utilities/"},{"title":"commands","url":"/tags/commands/"}],"timestamp":1573403100,"title":"Linux - Ubuntu - Random Commands"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"References, basic commands and sample rc file for GNU screen.\nReferences Man Page Quick Reference Basic commands Description Command Start a new session with session name screen -S \u0026lt;session_name\u0026gt; List running sessions / screens screen -ls Attach to a running session with name screen -R \u0026lt;session_name\u0026gt; Detach a running session screen -d \u0026lt;session_name\u0026gt; Command mode Ctrl+a Enable vertical scrolling mode in a running session Ctrl-a ESC Create new window Ctrl-a c Change to window by number Ctrl-a \u0026lt;number\u0026gt; Enter screen command Ctrl-a : Send command to the screen session screen -X -S \u0026lt;session_name\u0026gt; \u0026lt;command\u0026gt; Send kill command to the screen session screen -X -S \u0026lt;session_name\u0026gt; kill RC File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 # location: ~/.screenrc # A sample screenrc file with a hardstatus line at bottom # 3 windows created, with custom commands stuffed into each at session creation # and some key bindings. # the following lines give a status line, with the current window highlighted hardstatus alwayslastline hardstatus string \u0026#39;%{= kg}[%{G}%H%? %1`%?%{g}][%= %{= kB}%?%-Lw%?%{+b r}(%{G}%n*%f %t%?(%u)%?%{r})%{-b B}%?%+Lw%?%?%= %{g}%][%{B}%d/%m %{W}%C%A%{g}]\u0026#39; #hardstatus string \u0026#39;%{= kg}[ %{G}%H %{g}][%= %{= kB}%?%-Lw%?%{+b r}(%{G}%n*%f %t%?(%u)%?%{r})%{-b B}%?%+Lw%?%?%= %{g}%]\u0026#39; #hardstatus string \u0026#39;%{= kG}[%{G}%H%? %1`%?%{g}][%= %{= kw}%-w%{+b yk} %n*%t%?(%u)%? %{-}%+w %=%{g}][%{B}%d/%m %{W}%C%A%{g}]\u0026#39; # huge scrollback buffer defscrollback 10000 # no welcome message startup_message off # 256 colors # attrcolor b \u0026#34;.I\u0026#34; # termcapinfo xterm \u0026#39;Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm\u0026#39; defbce on # mouse tracking allows to switch region focus by clicking # mousetrack on # default windows screen -t HOME 0 bash stuff \u0026#34;cd /root\u0026#34; screen -t SRV 1 bash stuff \u0026#34;cd /root/srv\u0026#34; screen -t MYSQL 2 bash stuff \u0026#34;cd /root/mysql\u0026#34; select 0 #bind c screen 1 # window numbering starts at 1 not 0 #bind 0 select 10 # get rid of silly xoff stuff #bind s split # navigating regions with Ctrl-arrows bindkey \u0026#34;^[[1;5D\u0026#34; focus left bindkey \u0026#34;^[[1;5C\u0026#34; focus right bindkey \u0026#34;^[[1;5A\u0026#34; focus up bindkey \u0026#34;^[[1;5B\u0026#34; focus down # switch windows with F3 (prev) and F4 (next) bindkey \u0026#34;^[OR\u0026#34; prev bindkey \u0026#34;^[OS\u0026#34; next # switch layouts with Ctrl+F3 (prev layout) and Ctrl+F4 (next) bindkey \u0026#34;^[O1;5R\u0026#34; layout prev bindkey \u0026#34;^[O1;5S\u0026#34; layout next # F2 puts Screen into resize mode. Resize regions using hjkl keys. bindkey \u0026#34;^[OQ\u0026#34; eval \u0026#34;command -c rsz\u0026#34; # enter resize mode 1,1 Top # switch layouts with Ctrl+F3 (prev layout) and Ctrl+F4 (next) bindkey \u0026#34;^[O1;5R\u0026#34; layout prev bindkey \u0026#34;^[O1;5S\u0026#34; layout next # F2 puts Screen into resize mode. Resize regions using hjkl keys. bindkey \u0026#34;^[OQ\u0026#34; eval \u0026#34;command -c rsz\u0026#34; # enter resize mode # use hjkl keys to resize regions bind -c rsz h eval \u0026#34;resize -h -5\u0026#34; \u0026#34;command -c rsz\u0026#34; bind -c rsz j eval \u0026#34;resize -v -5\u0026#34; \u0026#34;command -c rsz\u0026#34; bind -c rsz k eval \u0026#34;resize -v +5\u0026#34; \u0026#34;command -c rsz\u0026#34; bind -c rsz l eval \u0026#34;resize -h +5\u0026#34; \u0026#34;command -c rsz\u0026#34; # quickly switch between regions using tab and arrows bind -c rsz \\t eval \u0026#34;focus\u0026#34; \u0026#34;command -c rsz\u0026#34; # Tab bind -c rsz -k kl eval \u0026#34;focus left\u0026#34; \u0026#34;command -c rsz\u0026#34; # Left bind -c rsz -k kr eval \u0026#34;focus right\u0026#34; \u0026#34;command -c rsz\u0026#34; # Right bind -c rsz -k ku eval \u0026#34;focus up\u0026#34; \u0026#34;command -c rsz\u0026#34; # Up bind -c rsz -k kd eval \u0026#34;focus down\u0026#34; \u0026#34;command -c rsz\u0026#34; # Down #source .screen_layout #layout save def ","date":"November 9, 2019","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/linux/posts/2019-11-09-screen/","smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"screen","url":"/tags/screen/"},{"title":"utilities","url":"/tags/utilities/"},{"title":"scripts","url":"/tags/scripts/"},{"title":"commands","url":"/tags/commands/"}],"timestamp":1573316700,"title":"GNU Screen Helpers"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"A script to chain multiple closures in python with example usage.\nClosure chaining 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from functools import wraps # A new closure will be returned as a chain of Closures in the incoming list order def chain_closures(closure_list=None): if not closure_list: return None def chain(f): @wraps(f) def r(*args, **kwargs): newfunc = f for c in reversed(closure_list): newfunc = c(newfunc) return newfunc(*args, **kwargs) return r return chain Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 from functools import wraps from closures import chain_closures import logging logger = logging.getLogger() def x(a): def request_logger(f): @wraps(f) def rlog(*args, **kwargs): logger.info(\u0026#34;%s x entry\u0026#34;, a) ret = f(*args, **kwargs) logger.info(\u0026#34;%s x exit\u0026#34;, a) return ret return rlog return request_logger def y(b): def request_logger(f): @wraps(f) def rlog(*args, **kwargs): logger.info(\u0026#34;%s y entry\u0026#34;, b) ret = f(*args, **kwargs) logger.info(\u0026#34;%s y exit\u0026#34;, b) return ret return rlog return request_logger def z(a, b): c1 = x(a) c2 = y(b) def request_logger(f): @wraps(f) def rlog(*args, **kwargs): q = c1(c2(f)) logger.info(\u0026#34;z entry\u0026#34;) ret = q(*args, **kwargs) logger.info(\u0026#34;z exit\u0026#34;) return ret return rlog return request_logger def w(a, b, f): c1 = x(a) c2 = y(b) q = c1(c2(f)) return q def get_w(a, b): c1 = x(a) c2 = y(b) q = chain_closures([c1, c2]) return q def f1(a, b): logger.info(\u0026#34;%s %s\u0026#34;, a, b) # raise Exception(\u0026#34;me except\u0026#34;) def smain(): c4 = get_w(10, 11) f2 = c4(f1) f2(12, 13) logger.info(f2.__name__) if __name__ == \u0026#34;__main__\u0026#34;: logging.basicConfig(format=\u0026#39;%(asctime)s - %(message)s\u0026#39;, datefmt=\u0026#39;%d-%b-%y %H:%M:%S\u0026#39;, level=logging.DEBUG) smain() ","date":"November 9, 2019","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/py/posts/2019-11-09-py-helpers-closures/","smallImg":"","tags":[{"title":"python","url":"/tags/python/"},{"title":"utilities","url":"/tags/utilities/"},{"title":"scripts","url":"/tags/scripts/"},{"title":"closures","url":"/tags/closures/"}],"timestamp":1573313100,"title":"Python Helpers - Closures"},{"categories":[{"title":"Software-Tools","url":"/categories/software-tools/"}],"content":"A script to cprofile a single function in python.\ncprofile a single function in python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import logging import cProfile import pstats import StringIO from closure_chaining_example import smain logging.basicConfig(format=\u0026#39;%(asctime)s - %(message)s\u0026#39;, datefmt=\u0026#39;%d-%b-%y %H:%M:%S\u0026#39;, level=logging.DEBUG) pr = cProfile.Profile() pr.enable() smain() # do something pr.disable() s = StringIO.StringIO() sortby = \u0026#39;cumulative\u0026#39; ps = pstats.Stats(pr, stream=s).sort_stats(sortby) ps.print_stats() logging.info(\u0026#34;Profilestats: %s\u0026#34;, s.getvalue()) ","date":"November 9, 2019","img":"","lang":"en","langName":"","largeImg":"","permalink":"/docs/py/posts/2019-11-09-py-helpers-profiling/","smallImg":"","tags":[{"title":"python","url":"/tags/python/"},{"title":"utilities","url":"/tags/utilities/"},{"title":"scripts","url":"/tags/scripts/"},{"title":"profiling","url":"/tags/profiling/"}],"timestamp":1573309500,"title":"Python Helpers - Profiling"},{"categories":[],"content":"","date":"January 1, 1","img":"","lang":"en","langName":"","largeImg":"","permalink":"/offline/","smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"}]
